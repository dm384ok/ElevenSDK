// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PostHog
import AVFoundation
import AdSupport
import AppTrackingTransparency
import AppsFlyerLib
import CoreAudioTypes
import CoreTelephony
import FBSDKCoreKit
import Firebase
import Foundation
import GoogleMobileAds
import OneSignalFramework
import OneSignalNotifications
@_exported import PostHog
import Swift
import SwiftUI
import SystemConfiguration
import TikTokBusinessSDK
import UIKit
import _AVKit_SwiftUI
import _Concurrency
import _StoreKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@_inheritsConvenienceInitializers @objc(PostHog) final public class PostHog : ObjectiveC.NSObject {
  @objc final public var customKeys: [Swift.String : Swift.String]
  @objc public static func enable()
  final public func vkluchit()
  @objc override dynamic public init()
  @objc deinit
}
public enum Gzip {
  public static let maxWindowBits: Swift.Int32
}
public struct CompressionLevel : Swift.RawRepresentable, Swift.Sendable {
  public let rawValue: Swift.Int32
  public static let noCompression: PostHog.CompressionLevel
  public static let bestSpeed: PostHog.CompressionLevel
  public static let bestCompression: PostHog.CompressionLevel
  public static let defaultCompression: PostHog.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error, Swift.Sendable {
  public enum Kind : Swift.Equatable, Swift.Sendable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: PostHog.GzipError.Kind, b: PostHog.GzipError.Kind) -> Swift.Bool
  }
  public let kind: PostHog.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: PostHog.CompressionLevel = .defaultCompression, wBits: Swift.Int32 = Gzip.maxWindowBits + 16) throws -> Foundation.Data
  public func gunzipped(wBits: Swift.Int32 = Gzip.maxWindowBits + 32) throws -> Foundation.Data
}
public func deleteSafely(_ file: Foundation.URL)
extension PostHog.PostHogSDK {
  @objc public static let didStartNotification: Foundation.Notification.Name
  @objc public static let didReceiveFeatureFlags: Foundation.Notification.Name
}
public var postHogVersion: Swift.String
public var postHogSdkName: Swift.String
public func toISO8601String(_ date: Foundation.Date) -> Swift.String
public func toISO8601Date(_ date: Swift.String) -> Foundation.Date?
@propertyWrapper final public class ReadWriteLock<Value> {
  public init(wrappedValue value: Value)
  @objc deinit
  final public var wrappedValue: Value {
    get
    set
  }
  final public func mutate(_ closure: (inout Value) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc public class PostHogSDK : ObjectiveC.NSObject {
  @objc public static let shared: PostHog.PostHogSDK
  @objc deinit
  @objc public func debug(_ enabled: Swift.Bool = true)
  @objc public func setup(_ config: PostHog.PostHogConfig)
  @objc public func getDistinctId() -> Swift.String
  @objc public func getAnonymousId() -> Swift.String
  @objc public func flush()
  @objc public func reset()
  @objc(registerProperties:) public func register(_ properties: [Swift.String : Any])
  @objc(unregisterProperties:) public func unregister(_ key: Swift.String)
  @objc public func identify(_ distinctId: Swift.String)
  @objc(identifyWithDistinctId:userProperties:) public func identify(_ distinctId: Swift.String, userProperties: [Swift.String : Any]? = nil)
  @objc(identifyWithDistinctId:userProperties:userPropertiesSetOnce:) public func identify(_ distinctId: Swift.String, userProperties: [Swift.String : Any]? = nil, userPropertiesSetOnce: [Swift.String : Any]? = nil)
  @objc public func capture(_ event: Swift.String)
  @objc(captureWithEvent:properties:) public func capture(_ event: Swift.String, properties: [Swift.String : Any]? = nil)
  @objc(captureWithEvent:properties:userProperties:) public func capture(_ event: Swift.String, properties: [Swift.String : Any]? = nil, userProperties: [Swift.String : Any]? = nil)
  @objc(captureWithEvent:properties:userProperties:userPropertiesSetOnce:) public func capture(_ event: Swift.String, properties: [Swift.String : Any]? = nil, userProperties: [Swift.String : Any]? = nil, userPropertiesSetOnce: [Swift.String : Any]? = nil)
  @objc(captureWithEvent:properties:userProperties:userPropertiesSetOnce:groupProperties:) public func capture(_ event: Swift.String, properties: [Swift.String : Any]? = nil, userProperties: [Swift.String : Any]? = nil, userPropertiesSetOnce: [Swift.String : Any]? = nil, groupProperties: [Swift.String : Any]? = nil)
  @objc public func screen(_ screenTitle: Swift.String)
  @objc(screenWithTitle:properties:) public func screen(_ screenTitle: Swift.String, properties: [Swift.String : Any]? = nil)
  @objc public func alias(_ alias: Swift.String)
  @objc(groupWithType:key:) public func group(type: Swift.String, key: Swift.String)
  @objc(groupWithType:key:groupProperties:) public func group(type: Swift.String, key: Swift.String, groupProperties: [Swift.String : Any]? = nil)
  @objc public func reloadFeatureFlags()
  @objc(reloadFeatureFlagsWithCallback:) public func reloadFeatureFlags(_ callback: @escaping () -> Swift.Void)
  @objc public func getFeatureFlag(_ key: Swift.String) -> Any?
  @objc public func isFeatureEnabled(_ key: Swift.String) -> Swift.Bool
  @objc public func getFeatureFlagPayload(_ key: Swift.String) -> Any?
  @objc public func optIn()
  @objc public func optOut()
  @objc public func isOptOut() -> Swift.Bool
  @objc public func close()
  @objc public static func with(_ config: PostHog.PostHogConfig) -> PostHog.PostHogSDK
}
@objc(PostHogConfig) public class PostHogConfig : ObjectiveC.NSObject {
  @objc(PostHogDataMode) public enum PostHogDataMode : Swift.Int {
    case wifi
    case cellular
    case any
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let host: Foundation.URL
  @objc final public let apiKey: Swift.String
  @objc public var flushAt: Swift.Int
  @objc public var maxQueueSize: Swift.Int
  @objc public var maxBatchSize: Swift.Int
  @objc public var flushIntervalSeconds: Swift.Double
  @objc public var dataMode: PostHog.PostHogConfig.PostHogDataMode
  @objc public var sendFeatureFlagEvent: Swift.Bool
  @objc public var preloadFeatureFlags: Swift.Bool
  @objc public var captureApplicationLifecycleEvents: Swift.Bool
  @objc public var captureScreenViews: Swift.Bool
  @objc public var debug: Swift.Bool
  @objc public var optOut: Swift.Bool
  public static let defaultHost: Swift.String
  @objc(apiKey:) public init(apiKey: Swift.String)
  @objc(apiKey:host:) public init(apiKey: Swift.String, host: Swift.String = defaultHost)
  @objc deinit
}
public func sanitizeDicionary(_ dict: [Swift.String : Any]?) -> [Swift.String : Any]?
@_hasMissingDesignatedInitializers public class PostHogEvent {
  public var event: Swift.String
  public var distinctId: Swift.String
  public var properties: [Swift.String : Any]
  public var timestamp: Foundation.Date
  public var uuid: Foundation.UUID
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (PostHog.Reachability) -> Swift.Void
  public typealias NetworkUnreachable = (PostHog.Reachability) -> Swift.Void
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: PostHog.Reachability.NetworkStatus, b: PostHog.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: PostHog.Reachability.Connection
    public static func == (a: PostHog.Reachability.Connection, b: PostHog.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: PostHog.Reachability.NetworkReachable?
  public var whenUnreachable: PostHog.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: PostHog.Reachability.Connection {
    get
  }
  public var connection: PostHog.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension PostHog.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension PostHog.PostHogConfig.PostHogDataMode : Swift.Equatable {}
extension PostHog.PostHogConfig.PostHogDataMode : Swift.Hashable {}
extension PostHog.PostHogConfig.PostHogDataMode : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension PostHog.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension PostHog.Reachability.NetworkStatus : Swift.Hashable {}
extension PostHog.Reachability.Connection : Swift.Equatable {}
extension PostHog.Reachability.Connection : Swift.Hashable {}
